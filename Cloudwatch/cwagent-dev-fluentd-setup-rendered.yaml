apiVersion: v1
kind: List
items:
#CloudWatch Name Space 
- apiVersion: v1
  kind: Namespace
  metadata:
    name: amazon-cloudwatch
    labels:
      name: amazon-cloudwatch
#Config Map about Cluster Info
- apiVersion: v1
  kind: ConfigMap
  metadata:
    name: cluster-info
    namespace: amazon-cloudwatch
  data:
    cluster.name: kubeflow-ts
    logs.region: us-east-1
#FluentD Service Account
- apiVersion: v1
  kind: ServiceAccount
  metadata:
    name: fluentd
    namespace: amazon-cloudwatch
#FluentD Cluster Role
- apiVersion: rbac.authorization.k8s.io/v1
  kind: ClusterRole
  metadata:
    name: fluentd-role
  rules:
    - apiGroups: [""]
      resources:
        - namespaces
        - pods
        - pods/logs
      verbs: ["get", "list", "watch"]
#FluentD Cluster Role Buinding
- apiVersion: rbac.authorization.k8s.io/v1
  kind: ClusterRoleBinding
  metadata:
    name: fluentd-role-binding
  roleRef:
    apiGroup: rbac.authorization.k8s.io
    kind: ClusterRole
    name: fluentd-role
  subjects:
    - kind: ServiceAccount
      name: fluentd
      namespace: amazon-cloudwatch
#CloudWatch Service Account
- apiVersion: v1
  kind: ServiceAccount
  metadata:
    name: cloudwatch-agent
    namespace: amazon-cloudwatch
#CloudWatch Cluster Role
- apiVersion: rbac.authorization.k8s.io/v1
  kind: ClusterRole
  metadata:
    name: cloudwatch-agent-role
  rules:
    - apiGroups: [""]
      resources: ["pods", "nodes", "endpoints"]
      verbs: ["list", "watch"]
    - apiGroups: ["apps"]
      resources: ["replicasets"]
      verbs: ["list", "watch"]
    - apiGroups: ["batch"]
      resources: ["jobs"]
      verbs: ["list", "watch"]
    - apiGroups: [""]
      resources: ["nodes/proxy"]
      verbs: ["get"]
    - apiGroups: [""]
      resources: ["nodes/stats", "configmaps", "events"]
      verbs: ["create"]
    - apiGroups: [""]
      resources: ["configmaps"]
      resourceNames: ["cwagent-clusterleader"]
      verbs: ["get","update"]
    - nonResourceURLs: ["/metrics"]
      verbs: ["get"]
#CloudWatch Cluster Role Binding
- apiVersion: rbac.authorization.k8s.io/v1
  kind: ClusterRoleBinding
  metadata:
    name: cloudwatch-agent-role-binding
  subjects:
    - kind: ServiceAccount
      name: cloudwatch-agent
      namespace: amazon-cloudwatch
  roleRef:
    kind: ClusterRole
    name: cloudwatch-agent-role
    apiGroup: rbac.authorization.k8s.io
#CloudWatch Agent ConfigMap
- apiVersion: v1
  kind: ConfigMap
  metadata:
    name: cwagentconfig
    namespace: amazon-cloudwatch
  data:
    cwagentconfig.json: |
      {
        "agent": {
          "region": "us-east-1"
        },
        "logs": {
          "metrics_collected": {
            "kubernetes": {
              "cluster_name": "kubeflow-ts",
              "metrics_collection_interval": 60
            }
          },
          "force_flush_interval": 5
        }
      }
#CloudWatch Agent DaemonSet
- apiVersion: apps/v1
  kind: DaemonSet
  metadata:
    name: cloudwatch-agent
    namespace: amazon-cloudwatch
  spec:
    selector:
      matchLabels:
        name: cloudwatch-agent
    template:
      metadata:
        labels:
          name: cloudwatch-agent
      spec:
        containers:
          - name: cloudwatch-agent
            image: amazon/cloudwatch-agent:1.247346.0b249609
            #ports:
            #  - containerPort: 8125
            #    hostPort: 8125
            #    protocol: UDP
            resources:
              limits:
                cpu:  200m
                memory: 200Mi
              requests:
                cpu: 200m
                memory: 200Mi
            # Please don't change below envs
            env:
              - name: HOST_IP
                valueFrom:
                  fieldRef:
                    fieldPath: status.hostIP
              - name: HOST_NAME
                valueFrom:
                  fieldRef:
                    fieldPath: spec.nodeName
              - name: K8S_NAMESPACE
                valueFrom:
                  fieldRef:
                    fieldPath: metadata.namespace
              - name: CI_VERSION
                value: "k8s/1.2.3"
            #   - name: "HTTP_PROXY"
            #     value: "http://proxy.eu.novartis.net:2010"
            #   - name: "HTTPS_PROXY"
            #     value: "http://proxy.eu.novartis.net:2010"
            #   - name: "NO_PROXY"
            #     value: "svc,local,172.20.0.0/16,10.0.0.0/8,10.161.2.0/24,10.100.0.0/16,100.64.0.0/10,localhost,127.0.0.1,169.254.169.254,.internal,s3.amazonaws.com,.s3.eu-west-1.amazonaws.com,api.ecr.eu-west-1.amazonaws.com,dkr.ecr.eu-west-1.amazonaws.com,ec2.eu-west-1.amazonaws.com"
            # Please don't change the mountPath
            volumeMounts:
              - name: cwagentconfig
                mountPath: /etc/cwagentconfig
              - name: rootfs
                mountPath: /rootfs
                readOnly: true
              - name: dockersock
                mountPath: /var/run/docker.sock
                readOnly: true
              - name: varlibdocker
                mountPath: /var/lib/docker
                readOnly: true
              - name: sys
                mountPath: /sys
                readOnly: true
              - name: devdisk
                mountPath: /dev/disk
                readOnly: true
        volumes:
          - name: cwagentconfig
            configMap:
              name: cwagentconfig
          - name: rootfs
            hostPath:
              path: /
          - name: dockersock
            hostPath:
              path: /var/run/docker.sock
          - name: varlibdocker
            hostPath:
              path: /var/lib/docker
          - name: sys
            hostPath:
              path: /sys
          - name: devdisk
            hostPath:
              path: /dev/disk/
        terminationGracePeriodSeconds: 60
        serviceAccountName: cloudwatch-agent
        hostNetwork: true
#FluentD Config Map
- apiVersion: v1
  kind: ConfigMap
  metadata:
    name: fluentd-config
    namespace: amazon-cloudwatch
    labels:
      k8s-app: fluentd-cloudwatch
  data:
    fluent.conf: |
      @include containers.conf
      @include systemd.conf
      @include host.conf

      <match fluent.**>
        @type null
      </match>
    containers.conf: |
      <source>
        @type tail
        @id in_tail_container_logs
        @label @containers
        path /var/log/containers/*.log
        exclude_path ["/var/log/containers/cloudwatch-agent*", "/var/log/containers/fluentd*", "/var/log/containers/jupyter*", "/var/log/containers/hub*", "/var/log/containers/proxy*"]
        pos_file /var/log/fluentd-containers.log.pos
        tag *
        read_from_head true
        enable_stat_watcher false
        refresh_interval 30
        <parse>
          @type json
          time_format %Y-%m-%dT%H:%M:%S.%NZ
        </parse>
      </source>

      <source>
        @type tail
        @id in_tail_proxy_logs
        @label @jupyter
        path /var/log/containers/proxy*
        pos_file /var/log/pos-proxy.log.pos
        tag *
        read_from_head true
        enable_stat_watcher false
        refresh_interval 30
        <parse>
          @type json
          time_format %Y-%m-%dT%H:%M:%S.%NZ
        </parse>
      </source>

      <source>
        @type tail
        @id in_tail_hub_logs
        @label @jupyter
        path /var/log/containers/hub*
        pos_file /var/log/pos-hub.log.pos
        tag *
        read_from_head true
        enable_stat_watcher false
        refresh_interval 30
        <parse>
          @type json
          time_format %Y-%m-%dT%H:%M:%S.%NZ
        </parse>
      </source>

      <source>
        @type tail
        @id in_tail_notebook_logs
        @label @jupyter
        path /var/log/containers/jupyter*
        pos_file /var/log/pos-singlenotebook.log.pos
        tag *
        read_from_head true
        enable_stat_watcher false
        refresh_interval 30
        <parse>
          @type json
          time_format %Y-%m-%dT%H:%M:%S.%NZ
        </parse>
      </source>

      <label @jupyter>
        <filter **>
          @type record_transformer
          @id filter_jupyter_stream_transformer
          <record>
            stream_name JupyterHUB-dev-${tag_parts[3]}
          </record>
        </filter>
       
        <match **>
          @type relabel
          @label @NORMAL
        </match>
      </label>
 
      <label @containers>
        <filter **>
          @type kubernetes_metadata
          @id filter_kube_metadata
        </filter>

        <filter **>
          @type record_transformer
          @id filter_containers_stream_transformer
          <record>
            stream_name dev-${tag_parts[3]}
          </record>
        </filter>

        <match **>
          @type relabel
          @label @NORMAL
        </match>
      </label>
     
      <label @NORMAL>
        <match **>
          @type cloudwatch_logs
          @id out_cloudwatch_logs_containers
          region "us-east-1"
          log_group_name "/aws/containerinsights/kubeflow-ts/application"
          log_stream_name_key stream_name
          remove_log_stream_name_key true
          auto_create_stream true
          <buffer>
            flush_interval 5
            chunk_limit_size 2m
            queued_chunks_limit_size 32
            retry_forever true
          </buffer>
        </match>
      </label>

    systemd.conf: |
      <source>
        @type systemd
        @id in_systemd_kubelet
        @label @systemd
        filters [{ "_SYSTEMD_UNIT": "kubelet.service" }]
        <entry>
          field_map {"MESSAGE": "message", "_HOSTNAME": "hostname", "_SYSTEMD_UNIT": "systemd_unit"}
          field_map_strict true
        </entry>
        path /var/log/journal
        <storage>
          @type local
          persistent true
          path /var/log/fluentd-journald-kubelet-pos.json
        </storage>
        read_from_head true
        tag kubelet.service
      </source>

      <source>
        @type systemd
        @id in_systemd_kubeproxy
        @label @systemd
        filters [{ "_SYSTEMD_UNIT": "kubeproxy.service" }]
        <entry>
          field_map {"MESSAGE": "message", "_HOSTNAME": "hostname", "_SYSTEMD_UNIT": "systemd_unit"}
          field_map_strict true
        </entry>
        path /var/log/journal
        <storage>
          @type local
          persistent true
          path /var/log/fluentd-journald-kubeproxy-pos.json
        </storage>
        read_from_head true
        tag kubeproxy.service
      </source>

      <source>
        @type systemd
        @id in_systemd_docker
        @label @systemd
        filters [{ "_SYSTEMD_UNIT": "docker.service" }]
        <entry>
          field_map {"MESSAGE": "message", "_HOSTNAME": "hostname", "_SYSTEMD_UNIT": "systemd_unit"}
          field_map_strict true
        </entry>
        path /var/log/journal
        <storage>
          @type local
          persistent true
          path /var/log/fluentd-journald-docker-pos.json
        </storage>
        read_from_head true
        tag docker.service
      </source>

      <label @systemd>
        <filter **>
          @type kubernetes_metadata
          @id filter_kube_metadata_systemd
        </filter>

        <filter **>
          @type record_transformer
          @id filter_systemd_stream_transformer
          <record>
            stream_name dev-${tag}-${record["hostname"]}
          </record>
        </filter>

        <match **>
          @type cloudwatch_logs
          @id out_cloudwatch_logs_systemd
          region "#{ENV.fetch('REGION')}"
          log_group_name "/aws/containerinsights/kubeflow-ts/dataplane"
          log_stream_name_key stream_name
          auto_create_stream true
          remove_log_stream_name_key true
          <buffer>
            flush_interval 5
            chunk_limit_size 2m
            queued_chunks_limit_size 32
            retry_forever true
          </buffer>
        </match>
      </label>
    host.conf: |
      <source>
        @type tail
        @id in_tail_dmesg
        @label @hostlogs
        path /var/log/dmesg
        pos_file /var/log/dmesg.log.pos
        tag host.dmesg
        read_from_head true
        <parse>
          @type syslog
        </parse>
      </source>

      <source>
        @type tail
        @id in_tail_secure
        @label @hostlogs
        path /var/log/secure
        pos_file /var/log/secure.log.pos
        tag host.secure
        read_from_head true
        <parse>
          @type syslog
        </parse>
      </source>

      <source>
        @type tail
        @id in_tail_messages
        @label @hostlogs
        path /var/log/messages
        pos_file /var/log/messages.log.pos
        tag host.messages
        read_from_head true
        <parse>
          @type syslog
        </parse>
      </source>

      <label @hostlogs>
        <filter **>
          @type kubernetes_metadata
          @id filter_kube_metadata_host
        </filter>

        <filter **>
          @type record_transformer
          @id filter_containers_stream_transformer_host
          <record>
            stream_name dev-${tag}-${record["host"]}
          </record>
        </filter>

        <match host.**>
          @type cloudwatch_logs
          @id out_cloudwatch_logs_host_logs
          region "us-east-1"
          log_group_name "/aws/containerinsights/kubeflow-ts/host"
          log_stream_name_key stream_name
          remove_log_stream_name_key true
          auto_create_stream true
          <buffer>
            flush_interval 5
            chunk_limit_size 2m
            queued_chunks_limit_size 32
            retry_forever true
          </buffer>
        </match>
      </label>
#FluentD DaemonSet
- apiVersion: apps/v1
  kind: DaemonSet
  metadata:
    name: fluentd-cloudwatch
    namespace: amazon-cloudwatch
  spec:
    selector:
      matchLabels:
        k8s-app: fluentd-cloudwatch
    template:
      metadata:
        labels:
          k8s-app: fluentd-cloudwatch
        annotations:
          configHash: 8915de4cf9c3551a8dc74c0137a3e83569d28c71044b0359c2578d2e0461825
      spec:
        serviceAccountName: fluentd
        terminationGracePeriodSeconds: 35
        initContainers:
          - name: copy-fluentd-config
            image: busybox
            command: ['sh', '-c', 'cp /config-volume/..data/* /fluentd/etc']
            volumeMounts:
              - name: config-volume
                mountPath: /config-volume
              - name: fluentdconf
                mountPath: /fluentd/etc
          - name: update-log-driver
            image: busybox
            command: ['sh','-c','']
        containers:
          - name: fluentd-cloudwatch
            image: fluent/fluentd-kubernetes-daemonset:v1.7.3-debian-cloudwatch-1.0
            env:
              - name: REGION
                value: us-east-1
              - name: CLUSTER_NAME
                value: kubeflow-ts
              - name: CI_VERSION
                value: "k8s/1.2.3"
            #   - name: "HTTP_PROXY"
            #     value: "http://proxy.eu.novartis.net:2010"
            #   - name: "HTTPS_PROXY"
            #     value: "http://proxy.eu.novartis.net:2010"
            #   - name: "NO_PROXY"
            #     value: "svc,local,172.20.0.0/16,10.161.1.0/16,10.0.0.0/8,10.100.0.0/16,100.64.0.0/10,localhost,127.0.0.1,169.254.169.254,.internal,s3.amazonaws.com,.s3.eu-west-1.amazonaws.com,api.ecr.eu-west-1.amazonaws.com,dkr.ecr.eu-west-1.amazonaws.com,ec2.eu-west-1.amazonaws.com"
            resources:
              limits:
                memory: 400Mi
              requests:
                cpu: 100m
                memory: 200Mi
            volumeMounts:
              - name: config-volume
                mountPath: /config-volume
              - name: fluentdconf
                mountPath: /fluentd/etc
              - name: varlog
                mountPath: /var/log
              - name: varlibdockercontainers
                mountPath: /var/lib/docker/containers
                readOnly: true
              - name: runlogjournal
                mountPath: /run/log/journal
                readOnly: true
              - name: dmesg
                mountPath: /var/log/dmesg
                readOnly: true
        volumes:
          - name: config-volume
            configMap:
              name: fluentd-config
          - name: fluentdconf
            emptyDir: {}
          - name: varlog
            hostPath:
              path: /var/log
          - name: varlibdockercontainers
            hostPath:
              path: /var/lib/docker/containers
          - name: runlogjournal
            hostPath:
              path: /run/log/journal
          - name: dmesg
            hostPath:
              path: /var/log/dmesg